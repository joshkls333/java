import java.util.*;import java.lang.reflect.*;/****  Author :  Josh Klaus*  Date    :  09/25/15*  Homework Assignment : 2*  Objective  :  A class that probes other classes.*                The user can select options to determine what *                details the probe returns about the class.  *                Information such as constructors, methods, *                constants, variables, interfaces, and superclass *                can be retrieved.*/public class Probe{    public static void main(String args[])    {        GetOpt g = new GetOpt(args, "cmCvisah");        int c;        g.opterr(false);        String t[] = g.getarg();        for(String s: t) if(!s.equals(""))             println("Class compiled from: " + s + ".java");        while( (c = g.getopt()) != -1)        {            switch(c)            {                case 'c' :  probeConstructors(t[0]);                            break;                case 'm' :  probeMethods(t[0]);                            break;                case 'C' :  probeConstants(t[0]);                            break;                case 'v' :  probeVariables(t[0]);                            break;                case 'i' :  probeInterfaces(t[0]);                            break;                case 's' :  probeSuperClass(t[0]);                            break;                case 'a' :  probeConstructors(t[0]);                            probeMethods(t[0]);                            probeConstants(t[0]);                            probeVariables(t[0]);                            probeInterfaces(t[0]);                            probeSuperClass(t[0]);                            break;                case 'h' :  printHelp();                            break;                case '?' :  System.out.println("Wrong option:" +                                  g.optopt());                            System.exit(1);            }        }    }  //**********************probeConstructors()************************     public static void probeConstructors(String s)    {        try        {            println("\nConstructors:");            Class c = Class.forName(s);            Constructor cons[] = c.getConstructors();            for(Constructor t: cons)            {                println(t);            }        }        catch (ClassNotFoundException e)        {            println("That class was not found!");        }    } //**********************probeMethods()*****************************     public static void probeMethods(String s)    {        try        {            println("\nMethods:");             Class c = Class.forName(s);            Method m[] = c.getDeclaredMethods();            for(Method d: m)            {                println(d);             }        }        catch (ClassNotFoundException e)        {            println("That class was not found!");        }    }//**********************probeConstants()****************************     public static void probeConstants(String s)    {        try        {            println("\nConstants:");            Class c = Class.forName(s);            Field f[] = c.getDeclaredFields();            for(Field d: f)                 if(Modifier.isFinal(d.getModifiers()) == true)                {                    println(d);                }        }        catch (ClassNotFoundException e)        {            println("That class was not found!");        }    }//**********************probeVariables()****************************     public static void probeVariables(String s)    {        try        {            println("\nVariables:");            Class c = Class.forName(s);            Field f[] = c.getDeclaredFields();            for(Field d: f)            {                println(d);            }        }        catch (ClassNotFoundException e)        {            println("That class was not found!");        }    }//**********************probeInterfaces()**************************     public static void probeInterfaces(String s)    {        try        {            println("\nInterfaces:");            Class c = Class.forName(s);            Class cls[] = c.getInterfaces();            for(Class d: cls)            {                println(d);            }        }        catch (ClassNotFoundException e)        {            println("That class was not found!");        }    }//**********************probeSuperClass()**************************     public static void probeSuperClass(String s)    {        try        {            println("\nSuperClass:");            Class c = Class.forName(s);            Class cls = c.getSuperclass();             println(cls.getName());         }        catch (ClassNotFoundException e)        {            println("That class was not found!");        }    }//**********************printHelp()********************************     public static void printHelp()    {        println("Usage:  java Probe [-options] name" +                "\nwhere name is a class name." +                "\n\nwhere options include:" +                "\n-c    probes for information on class constructors" +                "\n      displaying name and parameter types." +                "\n-m    probes for information on class methods" +                "\n      displaying name, parameter types, return types" +                "\n      and modifiers." +                "\n-C    probes for information on constants" +                "\n      displaying name and modifiers." +                "\n-v    probes for information on class variables" +                "\n      displaying name and modifiers." +                "\n-i    probes for information on class Interfaces" +                "\n      displaying name." +                "\n-s    probes for information on class Superclass" +                "\n      displaying name." +                "\n-a    runs all the options");     }//**********************prinln()**********************************     public static void println(Object o)    {        System.out.println(o + "");    }}